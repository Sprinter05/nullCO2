{
  "name": "nullco2-api",
  "version": "1.0.0",
  "description": "--- This API's purpose is to give the **Web frontend** an easier time retrieving values with simple HTTPS requests without having to worry about what other APIs the requests are coming from or how to handle really big JSON objects that contain properties that are useless most of the time for our application. ## What libraries do we work with? - [`express.js`](https://github.com/expressjs/express) to host the server and provide basic functionalities like routing or JSON object inspection, which is pretty useful if you want to use the API directly from a browser! - [`marked`](https://github.com/markedjs/marked) is what is used to render this same Markdown documentation in the browser! - [`node-geocoder`](https://github.com/nchaulet/node-geocoder) allows us to query any search about a location and get its coordinates. - [`geo-lib`](https://github.com/manuelbieh/geolib) is the tool we use to calculate distances between two points in the real world, it's only 2D but we didn't feel like finding a library that supported 3D calculations would really prove worthy for this project. - [`amadeus-node`](https://github.com/amadeus4dev/amadeus-node), yet another really useful tool that helped us retrieve values for nearby airports, upcoming flights, flight CO2 emissions. ## API Functions - `get_place?name=<string>`     - name -> Query you want to search for - `calc_distance?ogLat=<int>&ogLen=<int>&dtLat=<int>&dtLen=<int>`     - ogLat -> Latitude for the original point     - ogLen -> Longitude for the original point     - dtLat -> Latitude for the destination point     - dtLen -> Longitude for the destination point - `get_airport/<passengersInt>/?latx=<int>&lenx=<int>`     - passengersInt -> Amount of passengers to designate the search area     - latx -> Latitude for each one of the passengers numerated starting at 1     - lenx -> Longitude for each one of the passengers numerated starting at 1 - `get_flight?ogIata=<string>&dtIata=<string>&date=<string>`     - ogIata -> IATA code of the origin airport     - dtIata -> IATA code of the destination airport     - date -> Date for the flight, must be in `YYYY-MM-DD` - `kruskal_algorithm?matrix=<array[[]]>`     - matrix -> Array consisting of arrays to calculate the minimal path for the airport using [Kruskal's algorithm](https://en.wikipedia.org/wiki/Kruskal%27s_algorithm)",
  "main": "index.js",
  "scripts": {
    "start": "nodemon .",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "amadeus": "^9.1.0",
    "express": "^4.19.2",
    "fs": "^0.0.1-security",
    "geolib": "^3.3.4",
    "googleapis": "^133.0.0",
    "marked": "^12.0.0",
    "node-geocoder": "^4.3.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}
